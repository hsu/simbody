# Build the Simbody examples from the current directory which should have
# the structure of the installed examples/src directory. These will be 
# linked against the installed version of Simbody. The full name of the 
# current directory will be compiled into the examples so that they will
# know where to look for auxiliary files.
#
# The executables will end up in the current binary directory or in
# the subdirectories associated with the "SUBDIR_EXAMPLES" listed below.
# For multi-configuration generators (e.g. Visual Studio or Xcode), the
# executables will be in configuration subdirectories like Release/.
#
cmake_minimum_required(VERSION 2.8)
project(SimbodyExamples)

# All subdirectory examples must be listed here.  A subdirectory is needed 
# for any example that consists of more than just one source file and one 
# header file.
set(SUBDIR_EXAMPLES
    BricardMechanism
    Gazebo2Simbody
    TaskSpaceControl-UR10
    TaskSpaceControl-Atlas
)

# This depends on SimbodyConfig.cmake being located somewhere predictable
# on your machine. If you have installed it somewhere that CMake won't be
# able to guess, you'll need to tell find_package where to look.
FIND_PACKAGE(Simbody REQUIRED)

INCLUDE_DIRECTORIES(${Simbody_INCLUDE_DIR})
LINK_DIRECTORIES(${Simbody_LIB_DIR})

# Don't leave the build type blank on single-configuration generators;
# make sure Release examples get built by default.
IF(NOT MSVC AND NOT XCODE AND NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE Release CACHE STRING "Debug or Release build"
        FORCE)
ENDIF()

# Default to building with the C++11 ABI; user must change this if 
# the installed libraries were build with C++03.
IF(${CMAKE_CXX_COMPILER_ID} MATCHES "GNU" OR 
   ${CMAKE_CXX_COMPILER_ID} MATCHES "Clang")

    # If using either of these compilers, provide the option of 
    # compiling using the c++11 standard.
    OPTION(SIMBODY_STANDARD_11
        "Compile using the C++11 standard, if using GCC or Clang." ON)
	
    IF(${SIMBODY_STANDARD_11})
        # Using C++11 on OSX requires using libc++ instead of libstd++.
        # libc++ is an implementation of the C++ standard library for OSX.
        IF(APPLE)
            IF(XCODE)
                SET(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD "c++11")
                SET(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY "libc++")
            ELSE()
                SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
                SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
            ENDIF()
        ELSE() # not APPLE
            SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
        ENDIF()
    ENDIF()
ENDIF()

# CMAKE_CURRENT_SOURCE_DIR is an absolute path.
ADD_DEFINITIONS(
    "-DSIMBODY_EXAMPLES_INSTALL_SRC=\"${CMAKE_CURRENT_SOURCE_DIR}/\"")

# Examples can depend on any Simbody includes, and may depend on headers
# in the examples/shared directory, in which case they are
# included as #include "shared/SharedHeaderFile.h". 
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})

# First build examples that have their own subdirectories and CMakeLists
# files. 
foreach(EX_NAME ${SUBDIR_EXAMPLES})
    ADD_SUBDIRECTORY(${EX_NAME})
endforeach()

# Next pick up stragglers that consist solely of a .cpp file in the top
# level examples directory, with a single .h file of the same name.
# The example name is the source file name with ".cpp" removed, and
# the generated executable will have that name.

FILE(GLOB EXAMPLES "*.cpp")
FOREACH(EX_PROG ${EXAMPLES})
    GET_FILENAME_COMPONENT(EX_SRC  ${EX_PROG} NAME)
    GET_FILENAME_COMPONENT(EX_NAME ${EX_PROG} NAME_WE)
    set(EX_HEADER "${CMAKE_CURRENT_SOURCE_DIR}/${EX_NAME}.h")
    if(NOT EXISTS ${EX_HEADER})
        unset(EX_HEADER)
    endif()

    # Link with shared library
    ADD_EXECUTABLE(${EX_NAME} ${EX_PROG} ${EX_HEADER})
    IF(GUI_NAME)
        ADD_DEPENDENCIES(${EX_NAME} ${GUI_NAME})
    ENDIF()
    SET_TARGET_PROPERTIES(${EX_NAME}
    PROPERTIES
      COMPILE_FLAGS "-DSIMBODY_EXAMPLE_NAME=\"${EX_NAME}\""
      PROJECT_LABEL "Example - ${EX_NAME}")
    TARGET_LINK_LIBRARIES(${EX_NAME} ${Simbody_LIBRARIES})
ENDFOREACH()
